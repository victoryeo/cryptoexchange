// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package simple

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradeEngineClient is the client API for TradeEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeEngineClient interface {
	// A simple RPC.
	SendOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Empty, error)
	GetOrderStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TradeEngine_GetOrderStreamClient, error)
	GetTradeStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TradeEngine_GetTradeStreamClient, error)
	SendTrade(ctx context.Context, opts ...grpc.CallOption) (TradeEngine_SendTradeClient, error)
}

type tradeEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeEngineClient(cc grpc.ClientConnInterface) TradeEngineClient {
	return &tradeEngineClient{cc}
}

func (c *tradeEngineClient) SendOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/simple.TradeEngine/sendOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeEngineClient) GetOrderStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TradeEngine_GetOrderStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradeEngine_ServiceDesc.Streams[0], "/simple.TradeEngine/GetOrderStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradeEngineGetOrderStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradeEngine_GetOrderStreamClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type tradeEngineGetOrderStreamClient struct {
	grpc.ClientStream
}

func (x *tradeEngineGetOrderStreamClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradeEngineClient) GetTradeStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TradeEngine_GetTradeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradeEngine_ServiceDesc.Streams[1], "/simple.TradeEngine/GetTradeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradeEngineGetTradeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradeEngine_GetTradeStreamClient interface {
	Recv() (*Trade, error)
	grpc.ClientStream
}

type tradeEngineGetTradeStreamClient struct {
	grpc.ClientStream
}

func (x *tradeEngineGetTradeStreamClient) Recv() (*Trade, error) {
	m := new(Trade)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradeEngineClient) SendTrade(ctx context.Context, opts ...grpc.CallOption) (TradeEngine_SendTradeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradeEngine_ServiceDesc.Streams[2], "/simple.TradeEngine/SendTrade", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradeEngineSendTradeClient{stream}
	return x, nil
}

type TradeEngine_SendTradeClient interface {
	Send(*Trade) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type tradeEngineSendTradeClient struct {
	grpc.ClientStream
}

func (x *tradeEngineSendTradeClient) Send(m *Trade) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tradeEngineSendTradeClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TradeEngineServer is the server API for TradeEngine service.
// All implementations must embed UnimplementedTradeEngineServer
// for forward compatibility
type TradeEngineServer interface {
	// A simple RPC.
	SendOrder(context.Context, *Order) (*Empty, error)
	GetOrderStream(*Empty, TradeEngine_GetOrderStreamServer) error
	GetTradeStream(*Empty, TradeEngine_GetTradeStreamServer) error
	SendTrade(TradeEngine_SendTradeServer) error
	mustEmbedUnimplementedTradeEngineServer()
}

// UnimplementedTradeEngineServer must be embedded to have forward compatible implementations.
type UnimplementedTradeEngineServer struct {
}

func (UnimplementedTradeEngineServer) SendOrder(context.Context, *Order) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOrder not implemented")
}
func (UnimplementedTradeEngineServer) GetOrderStream(*Empty, TradeEngine_GetOrderStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderStream not implemented")
}
func (UnimplementedTradeEngineServer) GetTradeStream(*Empty, TradeEngine_GetTradeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTradeStream not implemented")
}
func (UnimplementedTradeEngineServer) SendTrade(TradeEngine_SendTradeServer) error {
	return status.Errorf(codes.Unimplemented, "method SendTrade not implemented")
}
func (UnimplementedTradeEngineServer) mustEmbedUnimplementedTradeEngineServer() {}

// UnsafeTradeEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeEngineServer will
// result in compilation errors.
type UnsafeTradeEngineServer interface {
	mustEmbedUnimplementedTradeEngineServer()
}

func RegisterTradeEngineServer(s grpc.ServiceRegistrar, srv TradeEngineServer) {
	s.RegisterService(&TradeEngine_ServiceDesc, srv)
}

func _TradeEngine_SendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeEngineServer).SendOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.TradeEngine/sendOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeEngineServer).SendOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeEngine_GetOrderStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradeEngineServer).GetOrderStream(m, &tradeEngineGetOrderStreamServer{stream})
}

type TradeEngine_GetOrderStreamServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type tradeEngineGetOrderStreamServer struct {
	grpc.ServerStream
}

func (x *tradeEngineGetOrderStreamServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func _TradeEngine_GetTradeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradeEngineServer).GetTradeStream(m, &tradeEngineGetTradeStreamServer{stream})
}

type TradeEngine_GetTradeStreamServer interface {
	Send(*Trade) error
	grpc.ServerStream
}

type tradeEngineGetTradeStreamServer struct {
	grpc.ServerStream
}

func (x *tradeEngineGetTradeStreamServer) Send(m *Trade) error {
	return x.ServerStream.SendMsg(m)
}

func _TradeEngine_SendTrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TradeEngineServer).SendTrade(&tradeEngineSendTradeServer{stream})
}

type TradeEngine_SendTradeServer interface {
	SendAndClose(*Empty) error
	Recv() (*Trade, error)
	grpc.ServerStream
}

type tradeEngineSendTradeServer struct {
	grpc.ServerStream
}

func (x *tradeEngineSendTradeServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tradeEngineSendTradeServer) Recv() (*Trade, error) {
	m := new(Trade)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TradeEngine_ServiceDesc is the grpc.ServiceDesc for TradeEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simple.TradeEngine",
	HandlerType: (*TradeEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendOrder",
			Handler:    _TradeEngine_SendOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrderStream",
			Handler:       _TradeEngine_GetOrderStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTradeStream",
			Handler:       _TradeEngine_GetTradeStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendTrade",
			Handler:       _TradeEngine_SendTrade_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "simple/simple.proto",
}
