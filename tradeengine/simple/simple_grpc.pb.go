// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package simple

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradeEngineClient is the client API for TradeEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeEngineClient interface {
	// A simple RPC.
	GetOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*OrderMessage, error)
	GetTrade(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*TradeMessage, error)
	SendTrade(ctx context.Context, in *TradeMessage, opts ...grpc.CallOption) (*OrderID, error)
}

type tradeEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeEngineClient(cc grpc.ClientConnInterface) TradeEngineClient {
	return &tradeEngineClient{cc}
}

func (c *tradeEngineClient) GetOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*OrderMessage, error) {
	out := new(OrderMessage)
	err := c.cc.Invoke(ctx, "/simple.TradeEngine/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeEngineClient) GetTrade(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*TradeMessage, error) {
	out := new(TradeMessage)
	err := c.cc.Invoke(ctx, "/simple.TradeEngine/GetTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeEngineClient) SendTrade(ctx context.Context, in *TradeMessage, opts ...grpc.CallOption) (*OrderID, error) {
	out := new(OrderID)
	err := c.cc.Invoke(ctx, "/simple.TradeEngine/SendTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeEngineServer is the server API for TradeEngine service.
// All implementations must embed UnimplementedTradeEngineServer
// for forward compatibility
type TradeEngineServer interface {
	// A simple RPC.
	GetOrder(context.Context, *OrderID) (*OrderMessage, error)
	GetTrade(context.Context, *OrderID) (*TradeMessage, error)
	SendTrade(context.Context, *TradeMessage) (*OrderID, error)
	mustEmbedUnimplementedTradeEngineServer()
}

// UnimplementedTradeEngineServer must be embedded to have forward compatible implementations.
type UnimplementedTradeEngineServer struct {
}

func (UnimplementedTradeEngineServer) GetOrder(context.Context, *OrderID) (*OrderMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedTradeEngineServer) GetTrade(context.Context, *OrderID) (*TradeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrade not implemented")
}
func (UnimplementedTradeEngineServer) SendTrade(context.Context, *TradeMessage) (*OrderID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTrade not implemented")
}
func (UnimplementedTradeEngineServer) mustEmbedUnimplementedTradeEngineServer() {}

// UnsafeTradeEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeEngineServer will
// result in compilation errors.
type UnsafeTradeEngineServer interface {
	mustEmbedUnimplementedTradeEngineServer()
}

func RegisterTradeEngineServer(s grpc.ServiceRegistrar, srv TradeEngineServer) {
	s.RegisterService(&TradeEngine_ServiceDesc, srv)
}

func _TradeEngine_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeEngineServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.TradeEngine/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeEngineServer).GetOrder(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeEngine_GetTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeEngineServer).GetTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.TradeEngine/GetTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeEngineServer).GetTrade(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeEngine_SendTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeEngineServer).SendTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple.TradeEngine/SendTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeEngineServer).SendTrade(ctx, req.(*TradeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeEngine_ServiceDesc is the grpc.ServiceDesc for TradeEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simple.TradeEngine",
	HandlerType: (*TradeEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrder",
			Handler:    _TradeEngine_GetOrder_Handler,
		},
		{
			MethodName: "GetTrade",
			Handler:    _TradeEngine_GetTrade_Handler,
		},
		{
			MethodName: "SendTrade",
			Handler:    _TradeEngine_SendTrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simple/simple.proto",
}
