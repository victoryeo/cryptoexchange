// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package simple

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradeEngineClient is the client API for TradeEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeEngineClient interface {
	// A simple RPC.
	GetOrder(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TradeEngine_GetOrderClient, error)
	GetTrade(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TradeEngine_GetTradeClient, error)
	SendTrade(ctx context.Context, opts ...grpc.CallOption) (TradeEngine_SendTradeClient, error)
}

type tradeEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeEngineClient(cc grpc.ClientConnInterface) TradeEngineClient {
	return &tradeEngineClient{cc}
}

func (c *tradeEngineClient) GetOrder(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TradeEngine_GetOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradeEngine_ServiceDesc.Streams[0], "/simple.TradeEngine/GetOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradeEngineGetOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradeEngine_GetOrderClient interface {
	Recv() (*OrderMessage, error)
	grpc.ClientStream
}

type tradeEngineGetOrderClient struct {
	grpc.ClientStream
}

func (x *tradeEngineGetOrderClient) Recv() (*OrderMessage, error) {
	m := new(OrderMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradeEngineClient) GetTrade(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TradeEngine_GetTradeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradeEngine_ServiceDesc.Streams[1], "/simple.TradeEngine/GetTrade", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradeEngineGetTradeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradeEngine_GetTradeClient interface {
	Recv() (*TradeMessage, error)
	grpc.ClientStream
}

type tradeEngineGetTradeClient struct {
	grpc.ClientStream
}

func (x *tradeEngineGetTradeClient) Recv() (*TradeMessage, error) {
	m := new(TradeMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradeEngineClient) SendTrade(ctx context.Context, opts ...grpc.CallOption) (TradeEngine_SendTradeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradeEngine_ServiceDesc.Streams[2], "/simple.TradeEngine/SendTrade", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradeEngineSendTradeClient{stream}
	return x, nil
}

type TradeEngine_SendTradeClient interface {
	Send(*TradeMessage) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type tradeEngineSendTradeClient struct {
	grpc.ClientStream
}

func (x *tradeEngineSendTradeClient) Send(m *TradeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tradeEngineSendTradeClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TradeEngineServer is the server API for TradeEngine service.
// All implementations must embed UnimplementedTradeEngineServer
// for forward compatibility
type TradeEngineServer interface {
	// A simple RPC.
	GetOrder(*Empty, TradeEngine_GetOrderServer) error
	GetTrade(*Empty, TradeEngine_GetTradeServer) error
	SendTrade(TradeEngine_SendTradeServer) error
	mustEmbedUnimplementedTradeEngineServer()
}

// UnimplementedTradeEngineServer must be embedded to have forward compatible implementations.
type UnimplementedTradeEngineServer struct {
}

func (UnimplementedTradeEngineServer) GetOrder(*Empty, TradeEngine_GetOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedTradeEngineServer) GetTrade(*Empty, TradeEngine_GetTradeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTrade not implemented")
}
func (UnimplementedTradeEngineServer) SendTrade(TradeEngine_SendTradeServer) error {
	return status.Errorf(codes.Unimplemented, "method SendTrade not implemented")
}
func (UnimplementedTradeEngineServer) mustEmbedUnimplementedTradeEngineServer() {}

// UnsafeTradeEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeEngineServer will
// result in compilation errors.
type UnsafeTradeEngineServer interface {
	mustEmbedUnimplementedTradeEngineServer()
}

func RegisterTradeEngineServer(s grpc.ServiceRegistrar, srv TradeEngineServer) {
	s.RegisterService(&TradeEngine_ServiceDesc, srv)
}

func _TradeEngine_GetOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradeEngineServer).GetOrder(m, &tradeEngineGetOrderServer{stream})
}

type TradeEngine_GetOrderServer interface {
	Send(*OrderMessage) error
	grpc.ServerStream
}

type tradeEngineGetOrderServer struct {
	grpc.ServerStream
}

func (x *tradeEngineGetOrderServer) Send(m *OrderMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _TradeEngine_GetTrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradeEngineServer).GetTrade(m, &tradeEngineGetTradeServer{stream})
}

type TradeEngine_GetTradeServer interface {
	Send(*TradeMessage) error
	grpc.ServerStream
}

type tradeEngineGetTradeServer struct {
	grpc.ServerStream
}

func (x *tradeEngineGetTradeServer) Send(m *TradeMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _TradeEngine_SendTrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TradeEngineServer).SendTrade(&tradeEngineSendTradeServer{stream})
}

type TradeEngine_SendTradeServer interface {
	SendAndClose(*Empty) error
	Recv() (*TradeMessage, error)
	grpc.ServerStream
}

type tradeEngineSendTradeServer struct {
	grpc.ServerStream
}

func (x *tradeEngineSendTradeServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tradeEngineSendTradeServer) Recv() (*TradeMessage, error) {
	m := new(TradeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TradeEngine_ServiceDesc is the grpc.ServiceDesc for TradeEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simple.TradeEngine",
	HandlerType: (*TradeEngineServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrder",
			Handler:       _TradeEngine_GetOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTrade",
			Handler:       _TradeEngine_GetTrade_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendTrade",
			Handler:       _TradeEngine_SendTrade_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "simple/simple.proto",
}
